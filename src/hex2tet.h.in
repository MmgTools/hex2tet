/**
 * \file hex2tet.h
 * \brief hex2tet.c header file
 *
 * \author Cecile Dobrzynski (Bx INP/Inria/UBordeaux)
 *
 * \version 1
 * \copyright GNU Lesser General Public License.
 */

#include "libhex2tet.h"

#define H2T_VER   "@CMAKE_RELEASE_VERSION@"
#define H2T_REL   "@CMAKE_RELEASE_DATE@"
#define H2T_CPY   "Copyright (c) Bx INP-Inria-UBordeaux-InriaSoft, 2016-"
#define H2T_STR   "------------------------------------------------------------"

/* Macro for fortran function generation */
/**
 * \def FORTRAN_NAME(nu,nl,pl,pc)
 * \brief Adds function definitions.
 * \param nu function name in upper case.
 * \param nl function name in lower case.
 * \param pl type of arguments.
 * \param pc name of arguments.
 * \note Macro coming from Scotch library.
 *
 * Adds function definitions with upcase, underscore and double
 * underscore to match any fortran compiler.
 *
 */
#define FORTRAN_NAME(nu,nl,pl,pc)               \
  void nu pl;                                   \
  void nl pl                                    \
  { nu pc; }                                    \
  void nl##_ pl                                 \
  { nu pc; }                                    \
  void nl##__ pl                                \
  { nu pc; }                                    \
  void nu pl

/**
 * \def FORTRAN_VARIADIC(nu,nl,pl,body)
 * \brief Adds function definitions.
 * \param nu function name in upper case.
 * \param nl function name in lower case.
 * \param pl type of arguments.
 * \param body body of the function.
 *
 * Adds function definitions with upcase, underscore and double
 * underscore to match any fortran compiler.
 *
 */
#define FORTRAN_VARIADIC(nu,nl,pl,body)           \
  void nu pl                                      \
  { body }                                        \
  void nl pl                                      \
  { body }                                        \
  void nl##_ pl                                   \
  { body }                                        \
  void nl##__ pl                                  \
  { body }                                        \

/** Safe allocation with calloc */
#define H2T_SAFE_CALLOC(ptr,size,type,law) do      \
  {                                                \
    ptr = (type*)calloc(size,sizeof(type));        \
    if ( !ptr ) {                                  \
      perror("  ## Memory problem: calloc");       \
      law;                                         \
    }                                              \
  }while(0)

/** Safe deallocation */
#define H2T_SAFE_FREE(ptr) do                   \
  {                                             \
    free(ptr);                                  \
    ptr = NULL;                                 \
  }while(0)


/** \brief hidir[i]: vertices of the face i */
static const unsigned char H2T_hidir[6][4] = { {0,3,2,1},{0,4,7,3},{0,1,5,4},{4,5,6,7},{1,2,6,5},{2,3,7,6} };
/** \brief hidiropp[i]: vertices of the face opposite to the face i */
static const unsigned char  H2T_hidirop[6][4] = { {7,4,5,6}, {5,1,2,6}, {7,3,2,6}, {1,0,3,2}, {3,0,4,7}, {0,1,5,4} };
/** \brief hopp[i][j]: vertex of face i opposite to the vertex j  */
static const unsigned char H2T_hopp [6][4] = { {2,1,0,3},{7,3,0,4},{5,4,0,1},{6,7,4,5},{6,5,1,2},{7,6,2,3} };
/** \brief hied[i][.]: diagonal starting from the vertex i of one of the tetra face */
static const unsigned char H2T_hied[8][3] = { {2,5,7}, {3,4,6}, {0,5,7}, {1,4,6}, {1,3,6}, {0,2,7}, {1,3,4}, {0,2,5} };
/** \brief hop[i]: vertex opposite to the vertex i */
static const unsigned char H2T_hop[8] = { 6,7,4,5,2,3,0,1 };

/**
 * \warning to replace with _MMG5_hedge struct
 */
typedef struct {
  MMG5_int      min,max,iel,nxt;
} hedge;


/**
 * \warning to replace with _MMG5_Hash struct
 */
typedef struct {
  MMG5_int      size,nhmax,hnxt;
  hedge   *item;
} Hedge;
typedef Hedge * pHedge;

/**
 * \enum H2T_Format
 * \brief Type of supported file format
 */
enum H2T_Format {
  H2T_FMT_MeditASCII, /*!< ASCII Medit (.mesh) */
  H2T_FMT_Numpy, /*!< Numpy array (.npy) */
  H2T_FMT_Unknown /*!< Unrecognized */
};

int    H2T_Get_format( char *ptr, int fmt );

int    H2T_chkorient(MMG5_pMesh ,int* ,int );
double H2T_quickvol(double *,double *,double *,double *);
double H2T_voltet(MMG5_pMesh ,int );

int    H2T_hashHexa(int* ,MMG5_int* ,int );
int    H2T_edgePut(pHedge ,int ,int ,int );
int    H2T_edgePoint(pHedge ,int ,int );

int    H2T_cuthex(MMG5_pMesh ,pHedge ,int* ,MMG5_int* ,int ) ;

int    _H2T_Init_mesh_var(va_list argptr);
int    H2T_Free_all_var(va_list argptr);
